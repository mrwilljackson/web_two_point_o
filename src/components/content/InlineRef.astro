---
export interface Props {
  id: string;
  title?: string;
  url?: string;
  className?: string;
}

const { id, title, url, className = '' } = Astro.props;
---

<span 
  class={`inline-ref ${className}`}
  data-ref-id={id}
  data-ref-title={title}
  data-ref-url={url}
>
  [{id}]
</span>

<style>
  .inline-ref {
    display: inline;
    color: #3B82F6;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    position: relative;
    text-decoration: none;
    border-bottom: 1px dotted #3B82F6;
    transition: all 0.2s ease;
  }

  .inline-ref:hover {
    color: #1D4ED8;
    border-bottom-color: #1D4ED8;
    background-color: rgba(59, 130, 246, 0.1);
    border-radius: 2px;
    padding: 1px 2px;
  }

  /* Tooltip styling */
  .inline-ref::after {
    content: attr(data-ref-title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #1F2937;
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 400;
    line-height: 1.4;
    white-space: nowrap;
    max-width: 300px;
    white-space: normal;
    width: max-content;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 1000;
    pointer-events: none;
  }

  .inline-ref::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(1px);
    border: 4px solid transparent;
    border-top-color: #1F2937;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 1001;
  }

  .inline-ref:hover::after,
  .inline-ref:hover::before {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-4px);
  }

  .inline-ref:hover::before {
    transform: translateX(-50%) translateY(-3px);
  }

  /* Ensure tooltip doesn't get cut off at top of viewport */
  @media (max-width: 768px) {
    .inline-ref::after {
      position: fixed;
      bottom: auto;
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      max-width: 280px;
    }

    .inline-ref::before {
      top: 100%;
      bottom: auto;
      border-top-color: transparent;
      border-bottom-color: #1F2937;
      transform: translateX(-50%) translateY(-1px);
    }

    .inline-ref:hover::after,
    .inline-ref:hover::before {
      transform: translateX(-50%) translateY(4px);
    }

    .inline-ref:hover::before {
      transform: translateX(-50%) translateY(3px);
    }
  }
</style>

<script>
  // Add click functionality to scroll to reference
  document.addEventListener('DOMContentLoaded', () => {
    const inlineRefs = document.querySelectorAll('.inline-ref');
    
    inlineRefs.forEach(ref => {
      ref.addEventListener('click', (e) => {
        e.preventDefault();
        const refId = ref.getAttribute('data-ref-id');
        const referencesSection = document.querySelector('.references-section');
        
        if (referencesSection) {
          // Scroll to references section
          referencesSection.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
          
          // Highlight the specific reference briefly
          const referenceItems = referencesSection.querySelectorAll('ol li, ul li');
          const targetRef = Array.from(referenceItems).find(item => 
            item.textContent.includes(`${refId}.`) || 
            item.textContent.startsWith(`${refId}.`)
          );
          
          if (targetRef) {
            targetRef.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
            targetRef.style.transition = 'background-color 0.3s ease';
            
            setTimeout(() => {
              targetRef.style.backgroundColor = '';
            }, 2000);
          }
        }
      });
    });
  });
</script>
