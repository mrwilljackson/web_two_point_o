---
import '../../styles/global.css';
import { wordpressAPI } from '../../lib/wordpress';
import {
  extractExcerpt,
  getFeaturedImage,
  getAuthor,
  getCategories,
  getTags,
  formatDate
} from '../../lib/content-utils';

// Fetch all posts
let posts = [];
let categories = [];
let tags = [];
let wordpressAvailable = false;

try {
  console.log('🔄 Fetching blog data...');
  [posts, categories, tags] = await Promise.all([
    wordpressAPI.getAllPosts(),
    wordpressAPI.getCategories(),
    wordpressAPI.getTags()
  ]);
  wordpressAvailable = true;
  console.log(`✅ Found ${posts.length} posts, ${categories.length} categories, ${tags.length} tags`);
} catch (error) {
  console.error('❌ Error fetching blog data:', error);
  console.log('📝 Using placeholder content for development');
}

// Sort posts by date (newest first)
posts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// SEO data
const title = `Blog | ${process.env.SITE_NAME || 'Website'}`;
const description = 'Read our latest blog posts and articles.';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />

    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="Blog" />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`${process.env.SITE_URL}/blog`} />

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="Blog" />
    <meta name="twitter:description" content={description} />

    <!-- Canonical URL -->
    <link rel="canonical" href={`${process.env.SITE_URL}/blog`} />

    <!-- Styles -->
    <style>
      body {
        font-family: system-ui, sans-serif;
        line-height: 1.6;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        color: #333;
        background: #f8f9fa;
      }

      .header {
        text-align: center;
        margin-bottom: 3rem;
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .header h1 {
        font-size: 3rem;
        margin-bottom: 0.5rem;
        color: #2c3e50;
      }

      .header p {
        font-size: 1.2rem;
        color: #666;
        margin: 0;
      }

      .sidebar {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
      }

      .sidebar h3 {
        margin-top: 0;
        color: #2c3e50;
        border-bottom: 2px solid #ecf0f1;
        padding-bottom: 0.5rem;
      }

      .category-list,
      .tag-list {
        list-style: none;
        padding: 0;
      }

      .category-list li,
      .tag-list li {
        margin-bottom: 0.5rem;
      }

      .category-list a,
      .tag-list a {
        color: #3498db;
        text-decoration: none;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .category-list a:hover,
      .tag-list a:hover {
        text-decoration: underline;
      }

      .count {
        background: #ecf0f1;
        color: #2c3e50;
        padding: 0.2rem 0.5rem;
        border-radius: 12px;
        font-size: 0.8rem;
      }

      .main-content {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 2rem;
      }

      .posts-grid {
        display: grid;
        gap: 2rem;
      }

      .post-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
      }

      .post-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
      }

      .post-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }

      .post-content {
        padding: 1.5rem;
      }

      .post-title {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: #2c3e50;
      }

      .post-title a {
        color: inherit;
        text-decoration: none;
      }

      .post-title a:hover {
        color: #3498db;
      }

      .post-meta {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 1rem;
      }

      .post-meta a {
        color: #3498db;
        text-decoration: none;
      }

      .post-meta a:hover {
        text-decoration: underline;
      }

      .post-excerpt {
        color: #555;
        margin-bottom: 1rem;
        line-height: 1.6;
      }

      .post-tags {
        margin-top: 1rem;
      }

      .tag {
        display: inline-block;
        background: #ecf0f1;
        color: #2c3e50;
        padding: 0.3rem 0.6rem;
        margin: 0.2rem 0.3rem 0.2rem 0;
        border-radius: 15px;
        font-size: 0.8rem;
        text-decoration: none;
      }

      .tag:hover {
        background: #bdc3c7;
      }

      .read-more {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
      }

      .read-more:hover {
        text-decoration: underline;
      }

      .navigation {
        text-align: center;
        margin-top: 2rem;
      }

      .nav-link {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
      }

      .nav-link:hover {
        text-decoration: underline;
      }

      .no-posts {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .no-posts h2 {
        color: #666;
        margin-bottom: 1rem;
      }

      @media (max-width: 768px) {
        body {
          padding: 10px;
        }

        .header h1 {
          font-size: 2rem;
        }

        .main-content {
          grid-template-columns: 1fr;
        }

        .sidebar {
          order: -1;
        }

        .post-title {
          font-size: 1.3rem;
        }
      }
    </style>
  </head>

  <body>
    <header class="header">
      <h1>Blog</h1>
      <p>Latest posts and articles</p>
    </header>

    <div class="main-content">
      <main>
        {posts.length > 0 ? (
          <div class="posts-grid">
            {posts.map(post => {
              const featuredImage = getFeaturedImage(post);
              const author = getAuthor(post);
              const postCategories = getCategories(post);
              const postTags = getTags(post);
              const excerpt = post.excerpt.rendered || extractExcerpt(post.content.rendered);
              const formattedDate = formatDate(post.date);

              return (
                <article class="post-card">
                  {featuredImage && (
                    <img
                      src={featuredImage.source_url}
                      alt={featuredImage.alt_text || post.title.rendered}
                      class="post-image"
                      loading="lazy"
                    />
                  )}

                  <div class="post-content">
                    <h2 class="post-title">
                      <a href={`/blog/${post.slug}`}>{post.title.rendered}</a>
                    </h2>

                    <div class="post-meta">
                      <time datetime={post.date}>{formattedDate}</time>
                      {author && (
                        <span> • By <a href={`/author/${author.slug}`}>{author.name}</a></span>
                      )}
                      {postCategories.length > 0 && (
                        <span> • In
                          {postCategories.map((category, index) => (
                            <span>
                              <a href={`/category/${category.slug}`}>{category.name}</a>
                              {index < postCategories.length - 1 ? ', ' : ''}
                            </span>
                          ))}
                        </span>
                      )}
                    </div>

                    <div class="post-excerpt" set:html={excerpt}></div>

                    {postTags.length > 0 && (
                      <div class="post-tags">
                        {postTags.map(tag => (
                          <a href={`/tag/${tag.slug}`} class="tag">
                            {tag.name}
                          </a>
                        ))}
                      </div>
                    )}

                    <p>
                      <a href={`/blog/${post.slug}`} class="read-more">
                        Read more →
                      </a>
                    </p>
                  </div>
                </article>
              );
            })}
          </div>
        ) : (
          <div class="no-posts">
            {wordpressAvailable ? (
              <>
                <h2>No posts found</h2>
                <p>Check back later for new content!</p>
              </>
            ) : (
              <>
                <h2>WordPress Not Connected</h2>
                <p>Blog posts will appear here when WordPress is running.</p>
                <p>Start your WordPress server at <code>http://localhost:8080</code> to see blog content.</p>
                <p>For production builds, the static content will be generated from WordPress.</p>
              </>
            )}
          </div>
        )}
      </main>

      <aside class="sidebar">
        {categories.length > 0 && (
          <section class="sidebar">
            <h3>Categories</h3>
            <ul class="category-list">
              {categories.map(category => (
                <li>
                  <a href={`/category/${category.slug}`}>
                    <span>{category.name}</span>
                    <span class="count">{category.count}</span>
                  </a>
                </li>
              ))}
            </ul>
          </section>
        )}

        {tags.length > 0 && (
          <section class="sidebar">
            <h3>Tags</h3>
            <ul class="tag-list">
              {tags.slice(0, 20).map(tag => (
                <li>
                  <a href={`/tag/${tag.slug}`}>
                    <span>{tag.name}</span>
                    <span class="count">{tag.count}</span>
                  </a>
                </li>
              ))}
            </ul>
          </section>
        )}
      </aside>
    </div>

    <footer class="navigation">
      <a href="/" class="nav-link">← Home</a>
    </footer>
  </body>
</html>
